#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>

const int G = 5; // Размер графа
int M[G][G]; // Матрица смежности
int visited[G]; // Массив для отслеживания посещённых вершин
// Функция для выхода из DFS (не рекурсивная реализация)
void DFS_Iterative(int start) {
    int stack[G]; // Стек для итеративного DFS
    int top = -1; // Указатель на верхушку стека

    // Добавляем начальную вершину в стек и отмечаем её как посещённую
    stack[++top] = start;
    visited[start] = 1;
    printf("%d ", start); // Выводим начальную вершину

    while (top != -1) { // Пока стек не пуст
        int v = stack[top]; // Берём вершину с вершины стека
        int found = 0; // Флаг для проверки не посещённых соседей

        for (int i = 0; i < G; i++) {
            // Ищем непосещённого соседа
            if (M[v][i] == 1 && !visited[i]) {
                stack[++top] = i; // Добавляем соседа в стек
                visited[i] = 1; // Отмечаем соседа как посещённого
                printf("%d ", i); // Выводим соседа
                found = 1; // Отмечаем, что нашли непосещённого
                break; // Прерываем цикл, чтобы начать обход с нового узла
            }
        }

        if (!found) {
            top--; // Если не нашли соседей, убираем вершину из стека
        }
    }
}
int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));
    // Инициализация матрицы смежности
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            if (i == j) {
                M[i][j] = 0; // Нет петли
            }
            else {
                M[i][j] = 0; // Изначально нет рёбер
            }
        }
    }
    // Генерация случайных рёбер для неориентированного графа
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            M[i][j] = M[j][i] = rand() % 2; // Случайное ребро между i и j
        }
    }
    // Вывод матрицы смежности на экран
    printf("Матрица смежности:\n");
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }
    // Инициализация массива посещённых вершин
    for (int i = 0; i < G; i++) {
        visited[i] = 0;
    }
    // Запуск итеративного обхода в глубину начиная с первой вершины (0)
    printf("Итеративный обход в глубину (DFS):\n");
    DFS_Iterative(0); // Начинаем с вершины 0

    return 0;
}
