#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <iostream>
#include <string.h>
#include <locale.h>
const int G = 5;  
int M[G][G];      
int visited[G];  
// Функция для выполнения обхода в глубину
void DFS(int v) {
    visited[v] = 1;  // Помечаем текущую вершину как посещённую
    printf("%d ", v);

    // Обходим всех соседей текущей вершины
    for (int i = 0; i < G; i++) {
        // Если есть ребро и вершина не посещена
        if (M[v][i] == 1 && !visited[i]) {
            DFS(i); // Рекурсивно вызываем DFS для соседней вершины
        }
    }
}

int main() {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL));

    // Инициализация матрицы смежности
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            if (i == j) {
                M[i][j] = 0;  // Нет петли
            }
            else {
                M[i][j] = 0;  // Изначально нет рёбер
            }
        }
    }

    // Генерация случайных рёбер для неориентированного графа
    for (int i = 0; i < G; i++) {
        for (int j = i + 1; j < G; j++) {
            M[i][j] = M[j][i] = rand() % 2;  // Случайное ребро между i и j
        }
    }

    // Вывод матрицы смежности на экран
    printf("Матрица смежности:\n");
    for (int i = 0; i < G; i++) {
        for (int j = 0; j < G; j++) {
            printf("%d ", M[i][j]);
        }
        printf("\n");
    }

    // Инициализация массива посещённых вершин
    for (int i = 0; i < G; i++) {
        visited[i] = 0;
    }

    printf("Обход в глубину (DFS):\n");
    DFS(0); // Начинаем с вершины 0

    return 0;
}
